* Unit

This package defines the units of MaW. 

** Manually written

*** unit.hpp

This file contains most of the definitions for the units. It contains the
definition of the unit_t and some enums and stuff.

*** unit_type.{h, cpp}

The definition and implementation of the base unit_type. This is the class that
will be extended by all unit types. It contains implementations for the methods
that are common to all units, like how their health points influence their
attack and defense strength. It also contains declarations of some virtual
methods which are meant to be overridden by the individual units. These define
the behaviours which are basically different for all types, like how many moves
it costs to move across terrain (but see {land, sea, air}_unit for some extra
details).

*** medic.{h,cpp}
This is a class that defines medic units. These units have the ability to heal
other units in the same tile.

*** trader.{h, cpp}
Trading units are an innovative feature of maw. The idea is plentifold, but
these units form the basis for the economic part of the game. The idea is that
trade units connect two cities. That's how you make money in the game. Whenever
a trade unit reaches one of the cities it connects, the player who owns it gets
a sum of gold. You get more money for connecting to a foreign city. This is also
a reason to build roads; the faster your trade units move, the more money you
make.

I think roads should cost money, so that we can avoid the road spamming that
happened in civ II.

Now, the other important thing trade units do is that they make up your trade
network. The trade network is important because thats how resources are shared.
Screw this, I'll explain later...


*** settler.{h,cpp}

These are units which can build new cities.

*** worker.{h,cpp}

These are units which can build improvements.

** Files to be autogenerated

*** convenience types

These classes are for cenvenience. They will contain some stuff which is common
for all land units etc. The reason they need to be autogenerated is that we
can't hardcode any values for terrains. They have to be generated after we've
parsed the terrain definitions.

All the methods here should be overridable in some way, so that we are not bound
by them.

**** air_unit

Air units all move in the same way. Every turn costs one movement point, and the
can move across all terrain. They cannot stay airborne forever however. There
will be a state 'IN_FLGHT', and a unit can only be in that state for a finite
number of turns, before it crashes.

**** water_unit

All water units will move in pretty much the same way. Movement will cost one
point per turn and they can move on all water tiles (OCEAN, COAST, etc).

Exceptions will be early units (which should only be able to move on coast, to
slow down the exploration) and maybe some smaller ships.

Also I think that water units should have some property like
'can_move_on_river', which is pretty self explanatory. It would make rivers a
little more important.

**** land_unit

These are a lot more complicated. One thing is simple; land units cannot move on
water. For the other tile types, they should declare a 'default_move_cost' or
something like that.


*** units.hpp

This will be the heart of MaW in a way. In this file all the unit types of the
game will be declared. This file will be autogenerated from configuration files.
