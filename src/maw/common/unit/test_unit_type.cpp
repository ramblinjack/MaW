
#include "unit_type.h"
#include <vector>

namespace maw {
namespace common {

namespace map {
// mock terrains
enum terrains {GRASS, MOUNTAIN, FOREST};
} // end namespace map

namespace unit {
using namespace map;

// mock supertypes
enum class supertype {TYPE1, TYPE2};

// mock global unit type declarations, these should be autogenerated
enum eunits {FAKE1, FAKE2};
const unsigned nunits = 2;
std::vector<unit_type*> *units;

class fake1 : public unit_type {
public:
  fake1(const supertype stype, const movp_num_t movs, const unsigned atk,
        const unsigned dfns, const hlth_t hlth):
    unit_type(stype, movs, atk, dfns, hlth) {}
private:
  virtual movp mov_cst(const tile_t to) const {
    return std::make_pair(1, 1);
  }
  // ok, so fake1 gets a 50% defense bonus on MOUNTAIN
  virtual float def_bonus(const tile_t on, const unit_t attacker) const {
    switch (get_terr(on)) {
    case MOUNTAIN: return 1.5;
    default: return 1.0;
    }
  }
  // fake1 gets a 25% attack bonus against units which have supertype TYPE2
  virtual float atk_bonus(const unit_t target, const tile_t from,
                                const tile_t to) const {
    switch (units->at(get_type(target))->get_stype()) {
    case supertype::TYPE2: return 1.25;
    default: return 1.0;
    }
  }
};

class fake2 : public unit_type {
public:
  fake2(const supertype stype, const movp_num_t movs, const unsigned atk,
            const unsigned dfns, const hlth_t hlth):
    unit_type(stype, movs, atk, dfns, hlth) {}
private:
  virtual movp mov_cst(const tile_t to) const {
    return std::make_pair(1, 1);
  }
  // ok, so fake2 gets a 20% defense bonus in forests
  virtual float def_bonus(const tile_t on, const unit_t attacker) const {
    switch (get_terr(on)) {
    case FOREST: return 1.2;
    default: return 1.0;
    }
  }
  // fake2 gets no attack bonuses
  virtual float atk_bonus(const unit_t target, const tile_t from,
                                const tile_t to) const {
    return 1.0;
  }
};

  
} // end namespace unit
} // end namespace common
} // end namespace maw

using namespace maw::common::unit;
using namespace std;

int main(int argc, char *argv[]) {

  units = new vector<unit_type*>(nunits);
  units->at(FAKE1) = new fake1(supertype::TYPE1, 4, 2, 1, 4);
  units->at(FAKE2) = new fake2(supertype::TYPE2, 2, 3, 2, 5);
  
  unit_t u1 = 0;
  set_hlth(&u1, 4);
  set_type(&u1, FAKE1);
  set_movp_den(&u1, 1);
  set_movp_num(&u1, 4);

  if (units->at(get_type(u1))->get_rem_movs(u1).first != 4) return 77;
  set_hlth(&u1, 2);
  if (units->at(get_type(u1))->get_rem_movs(u1).first != 2) return 77;

  unit_t u2 = 0;
  set_hlth(&u2, 5);
  set_type(&u2, FAKE2);
  set_movp_den(&u2, 1);
  set_movp_num(&u2, 2);





  
  return 0;
}

